# coding: utf-8

"""
    ArcGIS Earth Automation API

    This is an ArcGIS Earth Automation API help page of Swagger. You can find out more about ArcGIS Earth Automation API at https://doc.arcgis.com/en/arcgis-earth/automation-api/get-started.htm  # noqa: E501

    OpenAPI spec version: 1.12-Alpha
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AGECamera(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position': 'AGEMapPoint',
        'heading': 'float',
        'tilt': 'float',
        'roll': 'float'
    }

    attribute_map = {
        'position': 'position',
        'heading': 'heading',
        'tilt': 'tilt',
        'roll': 'roll'
    }

    def __init__(self, position=None, heading=None, tilt=None, roll=None):  # noqa: E501
        """AGECamera - a model defined in Swagger"""  # noqa: E501
        self._position = None
        self._heading = None
        self._tilt = None
        self._roll = None
        self.discriminator = None
        if position is not None:
            self.position = position
        if heading is not None:
            self.heading = heading
        if tilt is not None:
            self.tilt = tilt
        if roll is not None:
            self.roll = roll

    @property
    def position(self):
        """Gets the position of this AGECamera.  # noqa: E501


        :return: The position of this AGECamera.  # noqa: E501
        :rtype: AGEMapPoint
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this AGECamera.


        :param position: The position of this AGECamera.  # noqa: E501
        :type: AGEMapPoint
        """

        self._position = position

    @property
    def heading(self):
        """Gets the heading of this AGECamera.  # noqa: E501

        Heading  # noqa: E501

        :return: The heading of this AGECamera.  # noqa: E501
        :rtype: float
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this AGECamera.

        Heading  # noqa: E501

        :param heading: The heading of this AGECamera.  # noqa: E501
        :type: float
        """

        self._heading = heading

    @property
    def tilt(self):
        """Gets the tilt of this AGECamera.  # noqa: E501

        Tilt  # noqa: E501

        :return: The tilt of this AGECamera.  # noqa: E501
        :rtype: float
        """
        return self._tilt

    @tilt.setter
    def tilt(self, tilt):
        """Sets the tilt of this AGECamera.

        Tilt  # noqa: E501

        :param tilt: The tilt of this AGECamera.  # noqa: E501
        :type: float
        """

        self._tilt = tilt

    @property
    def roll(self):
        """Gets the roll of this AGECamera.  # noqa: E501

        Roll  # noqa: E501

        :return: The roll of this AGECamera.  # noqa: E501
        :rtype: float
        """
        return self._roll

    @roll.setter
    def roll(self, roll):
        """Sets the roll of this AGECamera.

        Roll  # noqa: E501

        :param roll: The roll of this AGECamera.  # noqa: E501
        :type: float
        """

        self._roll = roll

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AGECamera, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AGECamera):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
