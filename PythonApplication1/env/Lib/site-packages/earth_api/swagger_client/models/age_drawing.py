# coding: utf-8

"""
    ArcGIS Earth Automation API

    This is an ArcGIS Earth Automation API help page of Swagger. You can find out more about ArcGIS Earth Automation API at https://doc.arcgis.com/en/arcgis-earth/automation-api/get-started.htm  # noqa: E501

    OpenAPI spec version: 1.16
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AGEDrawing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'visible': 'bool',
        'geometry': 'dict(str, JToken)',
        'symbol': 'dict(str, JToken)',
        'label_symbol': 'dict(str, JToken)'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'visible': 'visible',
        'geometry': 'geometry',
        'symbol': 'symbol',
        'label_symbol': 'labelSymbol'
    }

    def __init__(self, id=None, title=None, visible=True, geometry=None, symbol=None, label_symbol=None):  # noqa: E501
        """AGEDrawing - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._visible = None
        self._geometry = None
        self._symbol = None
        self._label_symbol = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if visible is not None:
            self.visible = visible
        if geometry is not None:
            self.geometry = geometry
        if symbol is not None:
            self.symbol = symbol
        if label_symbol is not None:
            self.label_symbol = label_symbol

    @property
    def id(self):
        """Gets the id of this AGEDrawing.  # noqa: E501

        Id of drawing  # noqa: E501

        :return: The id of this AGEDrawing.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AGEDrawing.

        Id of drawing  # noqa: E501

        :param id: The id of this AGEDrawing.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this AGEDrawing.  # noqa: E501

        Title of drawing  # noqa: E501

        :return: The title of this AGEDrawing.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AGEDrawing.

        Title of drawing  # noqa: E501

        :param title: The title of this AGEDrawing.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def visible(self):
        """Gets the visible of this AGEDrawing.  # noqa: E501

        Visiblity of drawing  # noqa: E501

        :return: The visible of this AGEDrawing.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this AGEDrawing.

        Visiblity of drawing  # noqa: E501

        :param visible: The visible of this AGEDrawing.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def geometry(self):
        """Gets the geometry of this AGEDrawing.  # noqa: E501

        Geometry of drawing  # noqa: E501

        :return: The geometry of this AGEDrawing.  # noqa: E501
        :rtype: dict(str, JToken)
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this AGEDrawing.

        Geometry of drawing  # noqa: E501

        :param geometry: The geometry of this AGEDrawing.  # noqa: E501
        :type: dict(str, JToken)
        """

        self._geometry = geometry

    @property
    def symbol(self):
        """Gets the symbol of this AGEDrawing.  # noqa: E501

        Symbol of drawing  # noqa: E501

        :return: The symbol of this AGEDrawing.  # noqa: E501
        :rtype: dict(str, JToken)
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this AGEDrawing.

        Symbol of drawing  # noqa: E501

        :param symbol: The symbol of this AGEDrawing.  # noqa: E501
        :type: dict(str, JToken)
        """

        self._symbol = symbol

    @property
    def label_symbol(self):
        """Gets the label_symbol of this AGEDrawing.  # noqa: E501

        LabelSymbol of drawing  # noqa: E501

        :return: The label_symbol of this AGEDrawing.  # noqa: E501
        :rtype: dict(str, JToken)
        """
        return self._label_symbol

    @label_symbol.setter
    def label_symbol(self, label_symbol):
        """Sets the label_symbol of this AGEDrawing.

        LabelSymbol of drawing  # noqa: E501

        :param label_symbol: The label_symbol of this AGEDrawing.  # noqa: E501
        :type: dict(str, JToken)
        """

        self._label_symbol = label_symbol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AGEDrawing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AGEDrawing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
